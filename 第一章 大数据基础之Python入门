1-1  Python初体验——Hello world

Python脚本式编程模式
大型Python程序会涉及成千上万行代码和多个代码文件，很难直接在命令行交互模式下进行高效的编程开发。针对这一类程序，开发者可以编写相应的Python脚本并保存成相应的代码源文件（Python代码通常以py作为文件类型）。然后通过脚本参数调用解释器开始执行脚本，直到脚本执行完毕。当脚本执行完成后，解释器不再有效。

例如，我们可以将打印Hello world的代码保存为hello_world.py文件，然后在系统命令行中进入到代码文件所在路径，调用Python解释器执行该脚本文件即可。Python编译命令基本语法如下：

Python + 源代码文件名称
具体Hello world的执行过程如下图所示：



Print内置函数
Python内置（built-in）函数是一类随着Python解释器的运行会自动创建的函数，通常是一些使用比较频繁的功能或者是元操作。对于这一类函数，用户可以在自己的程序中或者在交互编程环境中不进行定义就直接使用。

print函数是其中最常用的内置函数之一，其基本功能是打印输出一个对象。print函数的基本语法如下：

print(output_obj)
其中，

print：Python打印输出的关键字
output_obj：待打印输出的对象
例如，我们要打印输出Hello world这个字符串，则相应的语句如下：

print('Hello world')
具体执行结果会在终端打印输出下述字符串：

Hello world


1-2  Python入门之字符串处理

字符串查找
字符串替换
字符串分割
字符串拼接
字符串长度获取
大小写转换
去除字符串首尾空格


字符串查找
Python提供了内置的字符串查找方法find()，利用该方法可以在一个较长的字符串中查找子字符串。

如果该字符串中有一个或者多个子字符串，则该方法返回第一个子串所在位置的最左端索引；若没有找到符合条件的子串，则返回-1。

find()方法的基本使用语法如下：

source_string.find(sub_string)

其中，

source_string：源字符串

sub_string：待查的目标子字符串

find：字符串查找方法的语法关键字


字符串替换
Python提供了replace()方法，用以替换给定字符串中的子串，其基本使用语法如下：

source_string.replace(old_string, new_string)
其中，

source_string：待处理的源字符串

old_string：被替换的旧字符串

new_string：替换的新字符串

replace：字符串替换方法的语法关键词


字符串分割
Python提供了split()方法实现字符串分割。该方法根据提供的分隔符将一个字符串分割为字符列表，如果不提供分隔符则程序会默认把空格（制表、换行等）作为分隔符。其基本使用语法如下：

source_string.split(separator)

其中，

source_string：待处理的源字符串

separator：分隔符

split：字符串分割方法的关键词


Python使用+来合并两个字符串，这种合并字符串的方法叫做拼接。其基本语法如下：

result_string = source_string1 + source_string2
其中，

source_string1为待合并的第一个字符串

source_string2为待合并的第二个字符串

result_string为合并后的字符串

注意：如果需要，在两个字符串之间可以增加相应的空格。具体见下面的例子
例如，将姓氏和名字拼接成全名：

# coding=utf-8
# 将姓氏和名字分别保存在两个变量中
first_name = 'Zhang'
last_name = 'san'
# 将姓氏和名字拼接，将结果存储在full_name变量中
full_name = first_name + " " + last_name
print(full_name)


字符串长度获取
Python提供了len()函数来计算并返回字符串的长度，即字符串中单个元素的个数。其基本语法如下：

length = len(target_string)

其中，

target_string: 目标字符串变量

length: 保存字符串长度的变量

len: 获取字符串长度的语法关键词

下面给出了具体的使用示例：

# coding=utf-8
# 创建一个字符串变量，获取其长度并打印出来
color = 'It is red'
length = len(color)
print (length)
#直接在len函数中引入字符串内容获得其长度，然后打印出来
print(len('This is a circle!'))



大小写转换
Python提供了upper()和lower()方法来对字符串进行大小写转换。其中，upper()会将字符串中的所有字符都转换为大写，lower()则将所有字符转换为小写。

除此之外，Python还贴心的提供了title()方法将字符串所有单词的首字母变成大写，而其他字母依然小写。

各个方法的具体语法如下：

# 将源字符串转换为大写并存入upper_string变量
upper_string = source_string.upper()
# 将源字符串转换为小写并存入lower_string变量
lower_string = source_string.lower()
# 将源字符串每个词首字母转换为大写并存入title_string变量
title_string = source_string.title()
其中， source_string：待处理的源字符串，具体使用示例如下：

# coding=utf-8
# 创建一个字符串say_hello
say_hello = 'Dear my Daughter'
# 使用upper()方法对say_hello字符串进行处理
upper_say_hello = say_hello.upper()
# 使用lower()方法对say_hello字符串进行处理
lower_say_hello = say_hello.lower()
# 使用title()方法对say_hello字符串进行处理
title_say_hello = say_hello.title()
# 打印输出四个字符串
print (say_hello+"\n")
print (upper_say_hello+"\n")
print (lower_say_hello+"\n")
print (title_say_hello+"\n")
输出结果：

Dear my Daughter
DEAR MY DAUGHTER
dear my daughter
Dear My Daughter
注意： 由上述打印结果可以看出，上述方法的调用并不会对原始的`say_hello`字符串产生影响，转换后的字符串会存入新的变量中.



去除字符串首尾空格
Python提供了strip()方法，可以去除字符串两侧（不包含内部）全部的空格；使用该方法，也可以通过指定参数，去除两侧指定的特定字符

注意：在指定参数时，如果参数是多个字符，则该方法会将多个字符逐个去比对进行删除（区分大小写），直到首尾两侧没有匹配的字符为止。但是，该方法对字符串中间的字符没有影响。
其基本语法如下：

strip_string1 = source_string.strip()
string_strip2 = source_string.strip(target_char)
其中，

source_string：待处理的源字符串

strip_string1和strip_string2：处理后的字符串

target_char：需要从源字符串首尾去除的特定字符

具体使用示例如下：

# coding = utf-8
# 创建一个字符串hello_world
hello_world = '  **The world ** is big!*    '
# 利用strip()方法处理hello_world字符串
blank_hello_world = hello_world.strip()
char_hello_world = hello_world.strip('TH *')
# 打印输出转换后的字符串
print(blank_hello_world)
print(char_hello_world)
输出结果：

**The world ** is big!*

he world ** is big!

输出结果分析：

从第一行打印结果可以看到, strip()方法去除了源字符串首尾的所有空格，但是并没有去除字符串中间的空格

从第二行打印结构可以看出，strip()方法将源字符串首尾所有空格、*以及字符T去掉了。而源字符串中头部的h因为是小写并没有去除
